// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public static partial class SchedulerServerServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::SchedulerExecutorApplication.GraphQl.State.SchedulerServerStoreAccessor> AddSchedulerServer(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::SchedulerExecutorApplication.GraphQl.State.SchedulerServerStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.CreateExecutorMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.CreateExecutorStatusMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.CreateFlowTaskStatusMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.GetAccountsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.GetFlowTasksForFlowQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.GetLoginQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.OnFlowStartSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.SchedulerServer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.ISchedulerServer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::SchedulerExecutorApplication.GraphQl.State.SchedulerServerStoreAccessor>("SchedulerServer", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("SchedulerServer", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("SchedulerServer"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.ExecutorEntity, global::SchedulerExecutorApplication.GraphQl.CreateExecutor_CreateExecutor_Executor>, global::SchedulerExecutorApplication.GraphQl.State.CreateExecutor_CreateExecutor_ExecutorFromExecutorEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.ExecutorStatusEntity, global::SchedulerExecutorApplication.GraphQl.CreateExecutorStatus_CreateStatus_ExecutorStatus>, global::SchedulerExecutorApplication.GraphQl.State.CreateExecutorStatus_CreateStatus_ExecutorStatusFromExecutorStatusEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowTaskStatusEntity, global::SchedulerExecutorApplication.GraphQl.CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus>, global::SchedulerExecutorApplication.GraphQl.State.CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatusFromFlowTaskStatusEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.PersonEntity, global::SchedulerExecutorApplication.GraphQl.GetAccounts_Accounts_Person>, global::SchedulerExecutorApplication.GraphQl.State.GetAccounts_Accounts_PersonFromPersonEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowTaskEntity, global::SchedulerExecutorApplication.GraphQl.GetFlowTasksForFlow_FlowTasksForFlow_FlowTask>, global::SchedulerExecutorApplication.GraphQl.State.GetFlowTasksForFlow_FlowTasksForFlow_FlowTaskFromFlowTaskEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.TaskEntity, global::SchedulerExecutorApplication.GraphQl.GetFlowTasksForFlow_FlowTasksForFlow_Task_Task>, global::SchedulerExecutorApplication.GraphQl.State.GetFlowTasksForFlow_FlowTasksForFlow_Task_TaskFromTaskEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.PersonEntity, global::SchedulerExecutorApplication.GraphQl.GetLogin_LocalLogin_Person>, global::SchedulerExecutorApplication.GraphQl.State.GetLogin_LocalLogin_PersonFromPersonEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowRunEntity, global::SchedulerExecutorApplication.GraphQl.OnFlowStart_OnFlowStart_FlowRun>, global::SchedulerExecutorApplication.GraphQl.State.OnFlowStart_OnFlowStart_FlowRunFromFlowRunEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::SchedulerExecutorApplication.GraphQl.ExecutorStatusCodeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusCodeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::SchedulerExecutorApplication.GraphQl.CreateExecutorInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::SchedulerExecutorApplication.GraphQl.ExecutorStatusInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorResult>, global::SchedulerExecutorApplication.GraphQl.State.CreateExecutorResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateExecutorResult>, global::SchedulerExecutorApplication.GraphQl.State.CreateExecutorBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateExecutorResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateExecutorResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.CreateExecutorMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.CreateExecutorMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusResult>, global::SchedulerExecutorApplication.GraphQl.State.CreateExecutorStatusResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusResult>, global::SchedulerExecutorApplication.GraphQl.State.CreateExecutorStatusBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.CreateExecutorStatusMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.CreateExecutorStatusMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusResult>, global::SchedulerExecutorApplication.GraphQl.State.CreateFlowTaskStatusResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusResult>, global::SchedulerExecutorApplication.GraphQl.State.CreateFlowTaskStatusBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.CreateFlowTaskStatusMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.CreateFlowTaskStatusMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetAccountsResult>, global::SchedulerExecutorApplication.GraphQl.State.GetAccountsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetAccountsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.IGetAccountsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetAccountsResult>, global::SchedulerExecutorApplication.GraphQl.State.GetAccountsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::SchedulerExecutorApplication.GraphQl.IGetAccountsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetAccountsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetAccountsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.GetAccountsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.IGetAccountsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.GetAccountsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowResult>, global::SchedulerExecutorApplication.GraphQl.State.GetFlowTasksForFlowResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowResult>, global::SchedulerExecutorApplication.GraphQl.State.GetFlowTasksForFlowBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.GetFlowTasksForFlowQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.GetFlowTasksForFlowQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetLoginResult>, global::SchedulerExecutorApplication.GraphQl.State.GetLoginResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetLoginResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.IGetLoginQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetLoginResult>, global::SchedulerExecutorApplication.GraphQl.State.GetLoginBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::SchedulerExecutorApplication.GraphQl.IGetLoginResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetLoginResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetLoginResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.GetLoginQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.IGetLoginQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.GetLoginQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IOnFlowStartResult>, global::SchedulerExecutorApplication.GraphQl.State.OnFlowStartResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IOnFlowStartResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.IOnFlowStartSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IOnFlowStartResult>, global::SchedulerExecutorApplication.GraphQl.State.OnFlowStartBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::SchedulerExecutorApplication.GraphQl.IOnFlowStartResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IOnFlowStartResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IOnFlowStartResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.OnFlowStartSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.IOnFlowStartSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.OnFlowStartSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::SchedulerExecutorApplication.GraphQl.State.SchedulerServerEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.SchedulerServer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SchedulerExecutorApplication.GraphQl.ISchedulerServer>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SchedulerExecutorApplication.GraphQl.SchedulerServer>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace SchedulerExecutorApplication.GraphQl
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorResult : global::System.IEquatable<CreateExecutorResult>, ICreateExecutorResult
    {
        public CreateExecutorResult(global::SchedulerExecutorApplication.GraphQl.ICreateExecutor_CreateExecutor? createExecutor)
        {
            CreateExecutor = createExecutor;
        }

        public global::SchedulerExecutorApplication.GraphQl.ICreateExecutor_CreateExecutor? CreateExecutor { get; }

        public virtual global::System.Boolean Equals(CreateExecutorResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateExecutor is null && other.CreateExecutor is null) || CreateExecutor != null && CreateExecutor.Equals(other.CreateExecutor)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateExecutorResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateExecutor != null)
                {
                    hash ^= 397 * CreateExecutor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutor_CreateExecutor_Executor : global::System.IEquatable<CreateExecutor_CreateExecutor_Executor>, ICreateExecutor_CreateExecutor_Executor
    {
        public CreateExecutor_CreateExecutor_Executor(global::System.Int32 id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(CreateExecutor_CreateExecutor_Executor? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateExecutor_CreateExecutor_Executor)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateExecutorResult
    {
        public global::SchedulerExecutorApplication.GraphQl.ICreateExecutor_CreateExecutor? CreateExecutor { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateExecutor_CreateExecutor
    {
        public global::System.Int32 Id { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateExecutor_CreateExecutor_Executor : ICreateExecutor_CreateExecutor
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorStatusResult : global::System.IEquatable<CreateExecutorStatusResult>, ICreateExecutorStatusResult
    {
        public CreateExecutorStatusResult(global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatus_CreateStatus? createStatus)
        {
            CreateStatus = createStatus;
        }

        public global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatus_CreateStatus? CreateStatus { get; }

        public virtual global::System.Boolean Equals(CreateExecutorStatusResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateStatus is null && other.CreateStatus is null) || CreateStatus != null && CreateStatus.Equals(other.CreateStatus)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateExecutorStatusResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateStatus != null)
                {
                    hash ^= 397 * CreateStatus.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorStatus_CreateStatus_ExecutorStatus : global::System.IEquatable<CreateExecutorStatus_CreateStatus_ExecutorStatus>, ICreateExecutorStatus_CreateStatus_ExecutorStatus
    {
        public CreateExecutorStatus_CreateStatus_ExecutorStatus(global::System.Int32 id)
        {
            Id = id;
        }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(CreateExecutorStatus_CreateStatus_ExecutorStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateExecutorStatus_CreateStatus_ExecutorStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateExecutorStatusResult
    {
        public global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatus_CreateStatus? CreateStatus { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateExecutorStatus_CreateStatus
    {
        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateExecutorStatus_CreateStatus_ExecutorStatus : ICreateExecutorStatus_CreateStatus
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateFlowTaskStatusResult : global::System.IEquatable<CreateFlowTaskStatusResult>, ICreateFlowTaskStatusResult
    {
        public CreateFlowTaskStatusResult(global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatus_CreateFlowTaskStatus? createFlowTaskStatus)
        {
            CreateFlowTaskStatus = createFlowTaskStatus;
        }

        public global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatus_CreateFlowTaskStatus? CreateFlowTaskStatus { get; }

        public virtual global::System.Boolean Equals(CreateFlowTaskStatusResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateFlowTaskStatus is null && other.CreateFlowTaskStatus is null) || CreateFlowTaskStatus != null && CreateFlowTaskStatus.Equals(other.CreateFlowTaskStatus)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateFlowTaskStatusResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateFlowTaskStatus != null)
                {
                    hash ^= 397 * CreateFlowTaskStatus.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus : global::System.IEquatable<CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus>, ICreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus
    {
        public CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus(global::System.Int32 id)
        {
            Id = id;
        }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateFlowTaskStatusResult
    {
        public global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatus_CreateFlowTaskStatus? CreateFlowTaskStatus { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateFlowTaskStatus_CreateFlowTaskStatus
    {
        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus : ICreateFlowTaskStatus_CreateFlowTaskStatus
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetAccountsResult : global::System.IEquatable<GetAccountsResult>, IGetAccountsResult
    {
        public GetAccountsResult(global::System.Collections.Generic.IReadOnlyList<global::SchedulerExecutorApplication.GraphQl.IGetAccounts_Accounts?>? accounts)
        {
            Accounts = accounts;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::SchedulerExecutorApplication.GraphQl.IGetAccounts_Accounts?>? Accounts { get; }

        public virtual global::System.Boolean Equals(GetAccountsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Accounts, other.Accounts));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAccountsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Accounts != null)
                {
                    foreach (var Accounts_elm in Accounts)
                    {
                        if (Accounts_elm != null)
                        {
                            hash ^= 397 * Accounts_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetAccounts_Accounts_Person : global::System.IEquatable<GetAccounts_Accounts_Person>, IGetAccounts_Accounts_Person
    {
        public GetAccounts_Accounts_Person(global::System.Int32 id)
        {
            Id = id;
        }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(GetAccounts_Accounts_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAccounts_Accounts_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetAccountsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::SchedulerExecutorApplication.GraphQl.IGetAccounts_Accounts?>? Accounts { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetAccounts_Accounts
    {
        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetAccounts_Accounts_Person : IGetAccounts_Accounts
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetFlowTasksForFlowResult : global::System.IEquatable<GetFlowTasksForFlowResult>, IGetFlowTasksForFlowResult
    {
        public GetFlowTasksForFlowResult(global::System.Collections.Generic.IReadOnlyList<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlow_FlowTasksForFlow?>? flowTasksForFlow)
        {
            FlowTasksForFlow = flowTasksForFlow;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlow_FlowTasksForFlow?>? FlowTasksForFlow { get; }

        public virtual global::System.Boolean Equals(GetFlowTasksForFlowResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(FlowTasksForFlow, other.FlowTasksForFlow));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlowTasksForFlowResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FlowTasksForFlow != null)
                {
                    foreach (var FlowTasksForFlow_elm in FlowTasksForFlow)
                    {
                        if (FlowTasksForFlow_elm != null)
                        {
                            hash ^= 397 * FlowTasksForFlow_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetFlowTasksForFlow_FlowTasksForFlow_FlowTask : global::System.IEquatable<GetFlowTasksForFlow_FlowTasksForFlow_FlowTask>, IGetFlowTasksForFlow_FlowTasksForFlow_FlowTask
    {
        public GetFlowTasksForFlow_FlowTasksForFlow_FlowTask(global::System.Int32 id, global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? successorsIds, global::System.Text.Json.JsonDocument? environmentVariables, global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlow_FlowTasksForFlow_Task? task)
        {
            Id = id;
            SuccessorsIds = successorsIds;
            EnvironmentVariables = environmentVariables;
            Task = task;
        }

        public global::System.Int32 Id { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? SuccessorsIds { get; }

        public global::System.Text.Json.JsonDocument? EnvironmentVariables { get; }

        public global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlow_FlowTasksForFlow_Task? Task { get; }

        public virtual global::System.Boolean Equals(GetFlowTasksForFlow_FlowTasksForFlow_FlowTask? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(SuccessorsIds, other.SuccessorsIds) && EnvironmentVariables == other.EnvironmentVariables && ((Task is null && other.Task is null) || Task != null && Task.Equals(other.Task));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlowTasksForFlow_FlowTasksForFlow_FlowTask)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (SuccessorsIds != null)
                {
                    foreach (var SuccessorsIds_elm in SuccessorsIds)
                    {
                        hash ^= 397 * SuccessorsIds_elm.GetHashCode();
                    }
                }

                if (EnvironmentVariables != null)
                {
                    hash ^= 397 * EnvironmentVariables.GetHashCode();
                }

                if (Task != null)
                {
                    hash ^= 397 * Task.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetFlowTasksForFlow_FlowTasksForFlow_Task_Task : global::System.IEquatable<GetFlowTasksForFlow_FlowTasksForFlow_Task_Task>, IGetFlowTasksForFlow_FlowTasksForFlow_Task_Task
    {
        public GetFlowTasksForFlow_FlowTasksForFlow_Task_Task(global::System.String? inputType, global::System.String? outputType, global::System.String? name, global::System.String? command)
        {
            InputType = inputType;
            OutputType = outputType;
            Name = name;
            Command = command;
        }

        public global::System.String? InputType { get; }

        public global::System.String? OutputType { get; }

        public global::System.String? Name { get; }

        public global::System.String? Command { get; }

        public virtual global::System.Boolean Equals(GetFlowTasksForFlow_FlowTasksForFlow_Task_Task? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((InputType is null && other.InputType is null) || InputType != null && InputType.Equals(other.InputType))) && ((OutputType is null && other.OutputType is null) || OutputType != null && OutputType.Equals(other.OutputType)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Command is null && other.Command is null) || Command != null && Command.Equals(other.Command));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFlowTasksForFlow_FlowTasksForFlow_Task_Task)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (InputType != null)
                {
                    hash ^= 397 * InputType.GetHashCode();
                }

                if (OutputType != null)
                {
                    hash ^= 397 * OutputType.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Command != null)
                {
                    hash ^= 397 * Command.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetFlowTasksForFlowResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlow_FlowTasksForFlow?>? FlowTasksForFlow { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetFlowTasksForFlow_FlowTasksForFlow
    {
        public global::System.Int32 Id { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? SuccessorsIds { get; }

        public global::System.Text.Json.JsonDocument? EnvironmentVariables { get; }

        public global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlow_FlowTasksForFlow_Task? Task { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetFlowTasksForFlow_FlowTasksForFlow_FlowTask : IGetFlowTasksForFlow_FlowTasksForFlow
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetFlowTasksForFlow_FlowTasksForFlow_Task
    {
        public global::System.String? InputType { get; }

        public global::System.String? OutputType { get; }

        public global::System.String? Name { get; }

        public global::System.String? Command { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetFlowTasksForFlow_FlowTasksForFlow_Task_Task : IGetFlowTasksForFlow_FlowTasksForFlow_Task
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetLoginResult : global::System.IEquatable<GetLoginResult>, IGetLoginResult
    {
        public GetLoginResult(global::SchedulerExecutorApplication.GraphQl.IGetLogin_LocalLogin? localLogin)
        {
            LocalLogin = localLogin;
        }

        public global::SchedulerExecutorApplication.GraphQl.IGetLogin_LocalLogin? LocalLogin { get; }

        public virtual global::System.Boolean Equals(GetLoginResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((LocalLogin is null && other.LocalLogin is null) || LocalLogin != null && LocalLogin.Equals(other.LocalLogin)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLoginResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (LocalLogin != null)
                {
                    hash ^= 397 * LocalLogin.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetLogin_LocalLogin_Person : global::System.IEquatable<GetLogin_LocalLogin_Person>, IGetLogin_LocalLogin_Person
    {
        public GetLogin_LocalLogin_Person(global::System.Int32 id, global::System.String? login)
        {
            Id = id;
            Login = login;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Login { get; }

        public virtual global::System.Boolean Equals(GetLogin_LocalLogin_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Login is null && other.Login is null) || Login != null && Login.Equals(other.Login));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLogin_LocalLogin_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Login != null)
                {
                    hash ^= 397 * Login.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetLoginResult
    {
        public global::SchedulerExecutorApplication.GraphQl.IGetLogin_LocalLogin? LocalLogin { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetLogin_LocalLogin
    {
        public global::System.Int32 Id { get; }

        public global::System.String? Login { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetLogin_LocalLogin_Person : IGetLogin_LocalLogin
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class OnFlowStartResult : global::System.IEquatable<OnFlowStartResult>, IOnFlowStartResult
    {
        public OnFlowStartResult(global::SchedulerExecutorApplication.GraphQl.IOnFlowStart_OnFlowStart? onFlowStart)
        {
            OnFlowStart = onFlowStart;
        }

        public global::SchedulerExecutorApplication.GraphQl.IOnFlowStart_OnFlowStart? OnFlowStart { get; }

        public virtual global::System.Boolean Equals(OnFlowStartResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((OnFlowStart is null && other.OnFlowStart is null) || OnFlowStart != null && OnFlowStart.Equals(other.OnFlowStart)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnFlowStartResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (OnFlowStart != null)
                {
                    hash ^= 397 * OnFlowStart.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class OnFlowStart_OnFlowStart_FlowRun : global::System.IEquatable<OnFlowStart_OnFlowStart_FlowRun>, IOnFlowStart_OnFlowStart_FlowRun
    {
        public OnFlowStart_OnFlowStart_FlowRun(global::System.Int32 id, global::System.Int32 flowId, global::System.Int32 executorId)
        {
            Id = id;
            FlowId = flowId;
            ExecutorId = executorId;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32 FlowId { get; }

        public global::System.Int32 ExecutorId { get; }

        public virtual global::System.Boolean Equals(OnFlowStart_OnFlowStart_FlowRun? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && FlowId == other.FlowId && ExecutorId == other.ExecutorId;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnFlowStart_OnFlowStart_FlowRun)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * FlowId.GetHashCode();
                hash ^= 397 * ExecutorId.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IOnFlowStartResult
    {
        public global::SchedulerExecutorApplication.GraphQl.IOnFlowStart_OnFlowStart? OnFlowStart { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IOnFlowStart_OnFlowStart
    {
        public global::System.Int32 Id { get; }

        public global::System.Int32 FlowId { get; }

        public global::System.Int32 ExecutorId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IOnFlowStart_OnFlowStart_FlowRun : IOnFlowStart_OnFlowStart
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "CreateExecutorInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::SchedulerExecutorApplication.GraphQl.CreateExecutorInput;
            var inputInfo = runtimeValue as global::SchedulerExecutorApplication.GraphQl.State.ICreateExecutorInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAccountIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("accountId", FormatAccountId(input.AccountId)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            return fields;
        }

        private global::System.Object? FormatAccountId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorInput : global::SchedulerExecutorApplication.GraphQl.State.ICreateExecutorInputInfo, global::System.IEquatable<CreateExecutorInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateExecutorInput)obj);
        }

        public virtual global::System.Boolean Equals(CreateExecutorInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AccountId == other.AccountId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AccountId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32 _value_accountId;
        private global::System.Boolean _set_accountId;
        private global::System.String? _value_name;
        private global::System.Boolean _set_name;
        private global::System.String? _value_description;
        private global::System.Boolean _set_description;
        public global::System.Int32 AccountId
        {
            get => _value_accountId;
            set
            {
                _set_accountId = true;
                _value_accountId = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.ICreateExecutorInputInfo.IsAccountIdSet => _set_accountId;
        public global::System.String? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.ICreateExecutorInputInfo.IsNameSet => _set_name;
        public global::System.String? Description
        {
            get => _value_description;
            set
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.ICreateExecutorInputInfo.IsDescriptionSet => _set_description;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class ExecutorStatusInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _executorStatusCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _longFormatter = default !;
        public global::System.String TypeName => "ExecutorStatusInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _executorStatusCodeFormatter = serializerResolver.GetInputValueFormatter("ExecutorStatusCode");
            _longFormatter = serializerResolver.GetInputValueFormatter("Long");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::SchedulerExecutorApplication.GraphQl.ExecutorStatusInput;
            var inputInfo = runtimeValue as global::SchedulerExecutorApplication.GraphQl.State.IExecutorStatusInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsExecutorIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("executorId", FormatExecutorId(input.ExecutorId)));
            }

            if (inputInfo.IsStatusCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("statusCode", FormatStatusCode(input.StatusCode)));
            }

            if (inputInfo.IsDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("date", FormatDate(input.Date)));
            }

            return fields;
        }

        private global::System.Object? FormatExecutorId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatStatusCode(global::SchedulerExecutorApplication.GraphQl.ExecutorStatusCode input)
        {
            return _executorStatusCodeFormatter.Format(input);
        }

        private global::System.Object? FormatDate(global::System.Int64 input)
        {
            return _longFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class ExecutorStatusInput : global::SchedulerExecutorApplication.GraphQl.State.IExecutorStatusInputInfo, global::System.IEquatable<ExecutorStatusInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExecutorStatusInput)obj);
        }

        public virtual global::System.Boolean Equals(ExecutorStatusInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ExecutorId == other.ExecutorId) && StatusCode.Equals(other.StatusCode) && Date == other.Date;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ExecutorId.GetHashCode();
                hash ^= 397 * StatusCode.GetHashCode();
                hash ^= 397 * Date.GetHashCode();
                return hash;
            }
        }

        private global::System.Int32 _value_executorId;
        private global::System.Boolean _set_executorId;
        private global::SchedulerExecutorApplication.GraphQl.ExecutorStatusCode _value_statusCode;
        private global::System.Boolean _set_statusCode;
        private global::System.Int64 _value_date;
        private global::System.Boolean _set_date;
        public global::System.Int32 ExecutorId
        {
            get => _value_executorId;
            set
            {
                _set_executorId = true;
                _value_executorId = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.IExecutorStatusInputInfo.IsExecutorIdSet => _set_executorId;
        public global::SchedulerExecutorApplication.GraphQl.ExecutorStatusCode StatusCode
        {
            get => _value_statusCode;
            set
            {
                _set_statusCode = true;
                _value_statusCode = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.IExecutorStatusInputInfo.IsStatusCodeSet => _set_statusCode;
        public global::System.Int64 Date
        {
            get => _value_date;
            set
            {
                _set_date = true;
                _value_date = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.IExecutorStatusInputInfo.IsDateSet => _set_date;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class FlowTaskStatusInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _flowTaskStatusCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _longFormatter = default !;
        public global::System.String TypeName => "FlowTaskStatusInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _flowTaskStatusCodeFormatter = serializerResolver.GetInputValueFormatter("FlowTaskStatusCode");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _longFormatter = serializerResolver.GetInputValueFormatter("Long");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusInput;
            var inputInfo = runtimeValue as global::SchedulerExecutorApplication.GraphQl.State.IFlowTaskStatusInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsFlowRunIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("flowRunId", FormatFlowRunId(input.FlowRunId)));
            }

            if (inputInfo.IsFlowTaskIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("flowTaskId", FormatFlowTaskId(input.FlowTaskId)));
            }

            if (inputInfo.IsStatusCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("statusCode", FormatStatusCode(input.StatusCode)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            if (inputInfo.IsDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("date", FormatDate(input.Date)));
            }

            return fields;
        }

        private global::System.Object? FormatFlowRunId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatFlowTaskId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatStatusCode(global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusCode input)
        {
            return _flowTaskStatusCodeFormatter.Format(input);
        }

        private global::System.Object? FormatDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDate(global::System.Int64 input)
        {
            return _longFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class FlowTaskStatusInput : global::SchedulerExecutorApplication.GraphQl.State.IFlowTaskStatusInputInfo, global::System.IEquatable<FlowTaskStatusInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FlowTaskStatusInput)obj);
        }

        public virtual global::System.Boolean Equals(FlowTaskStatusInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (FlowRunId == other.FlowRunId) && FlowTaskId == other.FlowTaskId && StatusCode.Equals(other.StatusCode) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Date == other.Date;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * FlowRunId.GetHashCode();
                hash ^= 397 * FlowTaskId.GetHashCode();
                hash ^= 397 * StatusCode.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Date.GetHashCode();
                return hash;
            }
        }

        private global::System.Int32 _value_flowRunId;
        private global::System.Boolean _set_flowRunId;
        private global::System.Int32 _value_flowTaskId;
        private global::System.Boolean _set_flowTaskId;
        private global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusCode _value_statusCode;
        private global::System.Boolean _set_statusCode;
        private global::System.String? _value_description;
        private global::System.Boolean _set_description;
        private global::System.Int64 _value_date;
        private global::System.Boolean _set_date;
        public global::System.Int32 FlowRunId
        {
            get => _value_flowRunId;
            set
            {
                _set_flowRunId = true;
                _value_flowRunId = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.IFlowTaskStatusInputInfo.IsFlowRunIdSet => _set_flowRunId;
        public global::System.Int32 FlowTaskId
        {
            get => _value_flowTaskId;
            set
            {
                _set_flowTaskId = true;
                _value_flowTaskId = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.IFlowTaskStatusInputInfo.IsFlowTaskIdSet => _set_flowTaskId;
        public global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusCode StatusCode
        {
            get => _value_statusCode;
            set
            {
                _set_statusCode = true;
                _value_statusCode = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.IFlowTaskStatusInputInfo.IsStatusCodeSet => _set_statusCode;
        public global::System.String? Description
        {
            get => _value_description;
            set
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.IFlowTaskStatusInputInfo.IsDescriptionSet => _set_description;
        public global::System.Int64 Date
        {
            get => _value_date;
            set
            {
                _set_date = true;
                _value_date = value;
            }
        }

        global::System.Boolean global::SchedulerExecutorApplication.GraphQl.State.IFlowTaskStatusInputInfo.IsDateSet => _set_date;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public enum ExecutorStatusCode
    {
        Offline,
        Online,
        Working,
        Error
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class ExecutorStatusCodeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ExecutorStatusCode>
    {
        public global::System.String TypeName => "ExecutorStatusCode";
        public ExecutorStatusCode Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "OFFLINE" => ExecutorStatusCode.Offline, "ONLINE" => ExecutorStatusCode.Online, "WORKING" => ExecutorStatusCode.Working, "ERROR" => ExecutorStatusCode.Error, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            ExecutorStatusCode.Offline => "OFFLINE", ExecutorStatusCode.Online => "ONLINE", ExecutorStatusCode.Working => "WORKING", ExecutorStatusCode.Error => "ERROR", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public enum FlowTaskStatusCode
    {
        Wait,
        Cancelled,
        Processing,
        Done,
        Error
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class FlowTaskStatusCodeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, FlowTaskStatusCode>
    {
        public global::System.String TypeName => "FlowTaskStatusCode";
        public FlowTaskStatusCode Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "WAIT" => FlowTaskStatusCode.Wait, "CANCELLED" => FlowTaskStatusCode.Cancelled, "PROCESSING" => FlowTaskStatusCode.Processing, "DONE" => FlowTaskStatusCode.Done, "ERROR" => FlowTaskStatusCode.Error, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            FlowTaskStatusCode.Wait => "WAIT", FlowTaskStatusCode.Cancelled => "CANCELLED", FlowTaskStatusCode.Processing => "PROCESSING", FlowTaskStatusCode.Done => "DONE", FlowTaskStatusCode.Error => "ERROR", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateExecutor GraphQL operation
    /// <code>
    /// mutation CreateExecutor($executor: CreateExecutorInput) {
    ///   createExecutor(executorInput: $executor) {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Executor {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateExecutorMutationDocument()
        {
        }

        public static CreateExecutorMutationDocument Instance { get; } = new CreateExecutorMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x28, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x3a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x28, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "e735832077db87aec19d05a178c79bea");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateExecutor GraphQL operation
    /// <code>
    /// mutation CreateExecutor($executor: CreateExecutorInput) {
    ///   createExecutor(executorInput: $executor) {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Executor {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorMutation : global::SchedulerExecutorApplication.GraphQl.ICreateExecutorMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateExecutorResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _createExecutorInputFormatter;
        public CreateExecutorMutation(global::StrawberryShake.IOperationExecutor<ICreateExecutorResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _createExecutorInputFormatter = serializerResolver.GetInputValueFormatter("CreateExecutorInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateExecutorResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateExecutorResult>> ExecuteAsync(global::SchedulerExecutorApplication.GraphQl.CreateExecutorInput? executor, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(executor);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateExecutorResult>> Watch(global::SchedulerExecutorApplication.GraphQl.CreateExecutorInput? executor, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(executor);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::SchedulerExecutorApplication.GraphQl.CreateExecutorInput? executor)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("executor", FormatExecutor(executor));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateExecutorMutationDocument.Instance.Hash.Value, name: "CreateExecutor", document: CreateExecutorMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatExecutor(global::SchedulerExecutorApplication.GraphQl.CreateExecutorInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _createExecutorInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateExecutor GraphQL operation
    /// <code>
    /// mutation CreateExecutor($executor: CreateExecutorInput) {
    ///   createExecutor(executorInput: $executor) {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Executor {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateExecutorMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateExecutorResult>> ExecuteAsync(global::SchedulerExecutorApplication.GraphQl.CreateExecutorInput? executor, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateExecutorResult>> Watch(global::SchedulerExecutorApplication.GraphQl.CreateExecutorInput? executor, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateExecutorStatus GraphQL operation
    /// <code>
    /// mutation CreateExecutorStatus($executorStatusInput: ExecutorStatusInput) {
    ///   createStatus(executorStatusInput: $executorStatusInput) {
    ///     __typename
    ///     id
    ///     ... on ExecutorStatus {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorStatusMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateExecutorStatusMutationDocument()
        {
        }

        public static CreateExecutorStatusMutationDocument Instance { get; } = new CreateExecutorStatusMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b26215c825fef3137fae95604a9e153d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateExecutorStatus GraphQL operation
    /// <code>
    /// mutation CreateExecutorStatus($executorStatusInput: ExecutorStatusInput) {
    ///   createStatus(executorStatusInput: $executorStatusInput) {
    ///     __typename
    ///     id
    ///     ... on ExecutorStatus {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorStatusMutation : global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateExecutorStatusResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _executorStatusInputFormatter;
        public CreateExecutorStatusMutation(global::StrawberryShake.IOperationExecutor<ICreateExecutorStatusResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _executorStatusInputFormatter = serializerResolver.GetInputValueFormatter("ExecutorStatusInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateExecutorStatusResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateExecutorStatusResult>> ExecuteAsync(global::SchedulerExecutorApplication.GraphQl.ExecutorStatusInput? executorStatusInput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(executorStatusInput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateExecutorStatusResult>> Watch(global::SchedulerExecutorApplication.GraphQl.ExecutorStatusInput? executorStatusInput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(executorStatusInput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::SchedulerExecutorApplication.GraphQl.ExecutorStatusInput? executorStatusInput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("executorStatusInput", FormatExecutorStatusInput(executorStatusInput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateExecutorStatusMutationDocument.Instance.Hash.Value, name: "CreateExecutorStatus", document: CreateExecutorStatusMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatExecutorStatusInput(global::SchedulerExecutorApplication.GraphQl.ExecutorStatusInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _executorStatusInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateExecutorStatus GraphQL operation
    /// <code>
    /// mutation CreateExecutorStatus($executorStatusInput: ExecutorStatusInput) {
    ///   createStatus(executorStatusInput: $executorStatusInput) {
    ///     __typename
    ///     id
    ///     ... on ExecutorStatus {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateExecutorStatusMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateExecutorStatusResult>> ExecuteAsync(global::SchedulerExecutorApplication.GraphQl.ExecutorStatusInput? executorStatusInput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateExecutorStatusResult>> Watch(global::SchedulerExecutorApplication.GraphQl.ExecutorStatusInput? executorStatusInput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateFlowTaskStatus GraphQL operation
    /// <code>
    /// mutation CreateFlowTaskStatus($flowTaskStatusInput: FlowTaskStatusInput) {
    ///   createFlowTaskStatus(flowTaskStatusInput: $flowTaskStatusInput) {
    ///     __typename
    ///     id
    ///     ... on FlowTaskStatus {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateFlowTaskStatusMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateFlowTaskStatusMutationDocument()
        {
        }

        public static CreateFlowTaskStatusMutationDocument Instance { get; } = new CreateFlowTaskStatusMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x24, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "31bd20dbdd1c618b3d837ff63430a027");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateFlowTaskStatus GraphQL operation
    /// <code>
    /// mutation CreateFlowTaskStatus($flowTaskStatusInput: FlowTaskStatusInput) {
    ///   createFlowTaskStatus(flowTaskStatusInput: $flowTaskStatusInput) {
    ///     __typename
    ///     id
    ///     ... on FlowTaskStatus {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateFlowTaskStatusMutation : global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateFlowTaskStatusResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _flowTaskStatusInputFormatter;
        public CreateFlowTaskStatusMutation(global::StrawberryShake.IOperationExecutor<ICreateFlowTaskStatusResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _flowTaskStatusInputFormatter = serializerResolver.GetInputValueFormatter("FlowTaskStatusInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateFlowTaskStatusResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateFlowTaskStatusResult>> ExecuteAsync(global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusInput? flowTaskStatusInput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(flowTaskStatusInput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateFlowTaskStatusResult>> Watch(global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusInput? flowTaskStatusInput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(flowTaskStatusInput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusInput? flowTaskStatusInput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("flowTaskStatusInput", FormatFlowTaskStatusInput(flowTaskStatusInput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateFlowTaskStatusMutationDocument.Instance.Hash.Value, name: "CreateFlowTaskStatus", document: CreateFlowTaskStatusMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFlowTaskStatusInput(global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _flowTaskStatusInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateFlowTaskStatus GraphQL operation
    /// <code>
    /// mutation CreateFlowTaskStatus($flowTaskStatusInput: FlowTaskStatusInput) {
    ///   createFlowTaskStatus(flowTaskStatusInput: $flowTaskStatusInput) {
    ///     __typename
    ///     id
    ///     ... on FlowTaskStatus {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ICreateFlowTaskStatusMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateFlowTaskStatusResult>> ExecuteAsync(global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusInput? flowTaskStatusInput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateFlowTaskStatusResult>> Watch(global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusInput? flowTaskStatusInput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetAccounts GraphQL operation
    /// <code>
    /// query GetAccounts {
    ///   accounts {
    ///     __typename
    ///     id
    ///     ... on Person {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetAccountsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAccountsQueryDocument()
        {
        }

        public static GetAccountsQueryDocument Instance { get; } = new GetAccountsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "ed484dafa2a680f851baf1a57d6937a1");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAccounts GraphQL operation
    /// <code>
    /// query GetAccounts {
    ///   accounts {
    ///     __typename
    ///     id
    ///     ... on Person {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetAccountsQuery : global::SchedulerExecutorApplication.GraphQl.IGetAccountsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAccountsResult> _operationExecutor;
        public GetAccountsQuery(global::StrawberryShake.IOperationExecutor<IGetAccountsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAccountsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAccountsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAccountsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAccountsQueryDocument.Instance.Hash.Value, name: "GetAccounts", document: GetAccountsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAccounts GraphQL operation
    /// <code>
    /// query GetAccounts {
    ///   accounts {
    ///     __typename
    ///     id
    ///     ... on Person {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetAccountsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAccountsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAccountsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetFlowTasksForFlow GraphQL operation
    /// <code>
    /// query GetFlowTasksForFlow($flowId: Int!) {
    ///   flowTasksForFlow(flowId: $flowId) {
    ///     __typename
    ///     id
    ///     successorsIds
    ///     environmentVariables
    ///     task {
    ///       __typename
    ///       inputType
    ///       outputType
    ///       name
    ///       command
    ///       ... on Task {
    ///         id
    ///       }
    ///     }
    ///     ... on FlowTask {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetFlowTasksForFlowQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFlowTasksForFlowQueryDocument()
        {
        }

        public static GetFlowTasksForFlowQueryDocument Instance { get; } = new GetFlowTasksForFlowQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x28, 0x24, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x28, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x49, 0x64, 0x73, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x61, 0x73, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "395edadfa54b894de78a0fc78b2d6efe");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFlowTasksForFlow GraphQL operation
    /// <code>
    /// query GetFlowTasksForFlow($flowId: Int!) {
    ///   flowTasksForFlow(flowId: $flowId) {
    ///     __typename
    ///     id
    ///     successorsIds
    ///     environmentVariables
    ///     task {
    ///       __typename
    ///       inputType
    ///       outputType
    ///       name
    ///       command
    ///       ... on Task {
    ///         id
    ///       }
    ///     }
    ///     ... on FlowTask {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetFlowTasksForFlowQuery : global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFlowTasksForFlowResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetFlowTasksForFlowQuery(global::StrawberryShake.IOperationExecutor<IGetFlowTasksForFlowResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFlowTasksForFlowResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFlowTasksForFlowResult>> ExecuteAsync(global::System.Int32 flowId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(flowId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFlowTasksForFlowResult>> Watch(global::System.Int32 flowId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(flowId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 flowId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("flowId", FormatFlowId(flowId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFlowTasksForFlowQueryDocument.Instance.Hash.Value, name: "GetFlowTasksForFlow", document: GetFlowTasksForFlowQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFlowId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFlowTasksForFlow GraphQL operation
    /// <code>
    /// query GetFlowTasksForFlow($flowId: Int!) {
    ///   flowTasksForFlow(flowId: $flowId) {
    ///     __typename
    ///     id
    ///     successorsIds
    ///     environmentVariables
    ///     task {
    ///       __typename
    ///       inputType
    ///       outputType
    ///       name
    ///       command
    ///       ... on Task {
    ///         id
    ///       }
    ///     }
    ///     ... on FlowTask {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetFlowTasksForFlowQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFlowTasksForFlowResult>> ExecuteAsync(global::System.Int32 flowId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFlowTasksForFlowResult>> Watch(global::System.Int32 flowId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetLogin GraphQL operation
    /// <code>
    /// query GetLogin($login: String, $password: String) {
    ///   localLogin(login: $login, password: $password) {
    ///     __typename
    ///     id
    ///     login
    ///     ... on Person {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetLoginQueryDocument : global::StrawberryShake.IDocument
    {
        private GetLoginQueryDocument()
        {
        }

        public static GetLoginQueryDocument Instance { get; } = new GetLoginQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x28, 0x24, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x28, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x20, 0x24, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2c, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "73381d198c672566aa0b3cc6e0e89a6d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetLogin GraphQL operation
    /// <code>
    /// query GetLogin($login: String, $password: String) {
    ///   localLogin(login: $login, password: $password) {
    ///     __typename
    ///     id
    ///     login
    ///     ... on Person {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetLoginQuery : global::SchedulerExecutorApplication.GraphQl.IGetLoginQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetLoginResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetLoginQuery(global::StrawberryShake.IOperationExecutor<IGetLoginResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetLoginResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetLoginResult>> ExecuteAsync(global::System.String? login, global::System.String? password, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(login, password);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetLoginResult>> Watch(global::System.String? login, global::System.String? password, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(login, password);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? login, global::System.String? password)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("login", FormatLogin(login));
            variables.Add("password", FormatPassword(password));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetLoginQueryDocument.Instance.Hash.Value, name: "GetLogin", document: GetLoginQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatLogin(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatPassword(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetLogin GraphQL operation
    /// <code>
    /// query GetLogin($login: String, $password: String) {
    ///   localLogin(login: $login, password: $password) {
    ///     __typename
    ///     id
    ///     login
    ///     ... on Person {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IGetLoginQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetLoginResult>> ExecuteAsync(global::System.String? login, global::System.String? password, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetLoginResult>> Watch(global::System.String? login, global::System.String? password, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the OnFlowStart GraphQL operation
    /// <code>
    /// subscription OnFlowStart($topicName: String) {
    ///   onFlowStart(topicName: $topicName) {
    ///     __typename
    ///     id
    ///     flowId
    ///     executorId
    ///     ... on FlowRun {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class OnFlowStartSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnFlowStartSubscriptionDocument()
        {
        }

        public static OnFlowStartSubscriptionDocument Instance { get; } = new OnFlowStartSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x28, 0x24, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x28, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "e0e8317b30c27754c3349816d1990f82");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnFlowStart GraphQL operation
    /// <code>
    /// subscription OnFlowStart($topicName: String) {
    ///   onFlowStart(topicName: $topicName) {
    ///     __typename
    ///     id
    ///     flowId
    ///     executorId
    ///     ... on FlowRun {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class OnFlowStartSubscription : global::SchedulerExecutorApplication.GraphQl.IOnFlowStartSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnFlowStartResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public OnFlowStartSubscription(global::StrawberryShake.IOperationExecutor<IOnFlowStartResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnFlowStartResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnFlowStartResult>> Watch(global::System.String? topicName, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(topicName);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? topicName)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("topicName", FormatTopicName(topicName));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnFlowStartSubscriptionDocument.Instance.Hash.Value, name: "OnFlowStart", document: OnFlowStartSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatTopicName(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the OnFlowStart GraphQL operation
    /// <code>
    /// subscription OnFlowStart($topicName: String) {
    ///   onFlowStart(topicName: $topicName) {
    ///     __typename
    ///     id
    ///     flowId
    ///     executorId
    ///     ... on FlowRun {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface IOnFlowStartSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnFlowStartResult>> Watch(global::System.String? topicName, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the SchedulerServer GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class SchedulerServer : global::SchedulerExecutorApplication.GraphQl.ISchedulerServer
    {
        private readonly global::SchedulerExecutorApplication.GraphQl.ICreateExecutorMutation _createExecutor;
        private readonly global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusMutation _createExecutorStatus;
        private readonly global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusMutation _createFlowTaskStatus;
        private readonly global::SchedulerExecutorApplication.GraphQl.IGetAccountsQuery _getAccounts;
        private readonly global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowQuery _getFlowTasksForFlow;
        private readonly global::SchedulerExecutorApplication.GraphQl.IGetLoginQuery _getLogin;
        private readonly global::SchedulerExecutorApplication.GraphQl.IOnFlowStartSubscription _onFlowStart;
        public SchedulerServer(global::SchedulerExecutorApplication.GraphQl.ICreateExecutorMutation createExecutor, global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusMutation createExecutorStatus, global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusMutation createFlowTaskStatus, global::SchedulerExecutorApplication.GraphQl.IGetAccountsQuery getAccounts, global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowQuery getFlowTasksForFlow, global::SchedulerExecutorApplication.GraphQl.IGetLoginQuery getLogin, global::SchedulerExecutorApplication.GraphQl.IOnFlowStartSubscription onFlowStart)
        {
            _createExecutor = createExecutor ?? throw new global::System.ArgumentNullException(nameof(createExecutor));
            _createExecutorStatus = createExecutorStatus ?? throw new global::System.ArgumentNullException(nameof(createExecutorStatus));
            _createFlowTaskStatus = createFlowTaskStatus ?? throw new global::System.ArgumentNullException(nameof(createFlowTaskStatus));
            _getAccounts = getAccounts ?? throw new global::System.ArgumentNullException(nameof(getAccounts));
            _getFlowTasksForFlow = getFlowTasksForFlow ?? throw new global::System.ArgumentNullException(nameof(getFlowTasksForFlow));
            _getLogin = getLogin ?? throw new global::System.ArgumentNullException(nameof(getLogin));
            _onFlowStart = onFlowStart ?? throw new global::System.ArgumentNullException(nameof(onFlowStart));
        }

        public static global::System.String ClientName => "SchedulerServer";
        public global::SchedulerExecutorApplication.GraphQl.ICreateExecutorMutation CreateExecutor => _createExecutor;
        public global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusMutation CreateExecutorStatus => _createExecutorStatus;
        public global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusMutation CreateFlowTaskStatus => _createFlowTaskStatus;
        public global::SchedulerExecutorApplication.GraphQl.IGetAccountsQuery GetAccounts => _getAccounts;
        public global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowQuery GetFlowTasksForFlow => _getFlowTasksForFlow;
        public global::SchedulerExecutorApplication.GraphQl.IGetLoginQuery GetLogin => _getLogin;
        public global::SchedulerExecutorApplication.GraphQl.IOnFlowStartSubscription OnFlowStart => _onFlowStart;
    }

    /// <summary>
    /// Represents the SchedulerServer GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial interface ISchedulerServer
    {
        global::SchedulerExecutorApplication.GraphQl.ICreateExecutorMutation CreateExecutor { get; }

        global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusMutation CreateExecutorStatus { get; }

        global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusMutation CreateFlowTaskStatus { get; }

        global::SchedulerExecutorApplication.GraphQl.IGetAccountsQuery GetAccounts { get; }

        global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowQuery GetFlowTasksForFlow { get; }

        global::SchedulerExecutorApplication.GraphQl.IGetLoginQuery GetLogin { get; }

        global::SchedulerExecutorApplication.GraphQl.IOnFlowStartSubscription OnFlowStart { get; }
    }
}

namespace SchedulerExecutorApplication.GraphQl.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class ExecutorEntity
    {
        public ExecutorEntity(global::System.Int32 id = default !, global::System.String? name = default !)
        {
            Id = id;
            Name = name;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class ExecutorStatusEntity
    {
        public ExecutorStatusEntity(global::System.Int32 id = default !)
        {
            Id = id;
        }

        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class FlowTaskStatusEntity
    {
        public FlowTaskStatusEntity(global::System.Int32 id = default !)
        {
            Id = id;
        }

        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class PersonEntity
    {
        public PersonEntity(global::System.Int32 id = default !, global::System.String? login = default !)
        {
            Id = id;
            Login = login;
        }

        public global::System.Int32 Id { get; }

        public global::System.String? Login { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class FlowTaskEntity
    {
        public FlowTaskEntity(global::System.Int32 id = default !, global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? successorsIds = default !, global::System.Text.Json.JsonDocument? environmentVariables = default !, global::StrawberryShake.EntityId? task = default !)
        {
            Id = id;
            SuccessorsIds = successorsIds;
            EnvironmentVariables = environmentVariables;
            Task = task;
        }

        public global::System.Int32 Id { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? SuccessorsIds { get; }

        public global::System.Text.Json.JsonDocument? EnvironmentVariables { get; }

        public global::StrawberryShake.EntityId? Task { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class TaskEntity
    {
        public TaskEntity(global::System.String? inputType = default !, global::System.String? outputType = default !, global::System.String? name = default !, global::System.String? command = default !)
        {
            InputType = inputType;
            OutputType = outputType;
            Name = name;
            Command = command;
        }

        public global::System.String? InputType { get; }

        public global::System.String? OutputType { get; }

        public global::System.String? Name { get; }

        public global::System.String? Command { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class FlowRunEntity
    {
        public FlowRunEntity(global::System.Int32 id = default !, global::System.Int32 flowId = default !, global::System.Int32 executorId = default !)
        {
            Id = id;
            FlowId = flowId;
            ExecutorId = executorId;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32 FlowId { get; }

        public global::System.Int32 ExecutorId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.CreateExecutorResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.ExecutorEntity, CreateExecutor_CreateExecutor_Executor> _createExecutor_CreateExecutor_ExecutorFromExecutorEntityMapper;
        public CreateExecutorResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.ExecutorEntity, CreateExecutor_CreateExecutor_Executor> createExecutor_CreateExecutor_ExecutorFromExecutorEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _createExecutor_CreateExecutor_ExecutorFromExecutorEntityMapper = createExecutor_CreateExecutor_ExecutorFromExecutorEntityMapper ?? throw new global::System.ArgumentNullException(nameof(createExecutor_CreateExecutor_ExecutorFromExecutorEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::SchedulerExecutorApplication.GraphQl.ICreateExecutorResult);
        public CreateExecutorResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateExecutorResultInfo info)
            {
                return new CreateExecutorResult(MapICreateExecutor_CreateExecutor(info.CreateExecutor, snapshot));
            }

            throw new global::System.ArgumentException("CreateExecutorResultInfo expected.");
        }

        private global::SchedulerExecutorApplication.GraphQl.ICreateExecutor_CreateExecutor? MapICreateExecutor_CreateExecutor(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Executor", global::System.StringComparison.Ordinal))
            {
                return _createExecutor_CreateExecutor_ExecutorFromExecutorEntityMapper.Map(snapshot.GetEntity<global::SchedulerExecutorApplication.GraphQl.State.ExecutorEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateExecutorResultInfo(global::StrawberryShake.EntityId? createExecutor, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateExecutor = createExecutor;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? CreateExecutor { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateExecutorResultInfo(CreateExecutor, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutor_CreateExecutor_ExecutorFromExecutorEntityMapper : global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.ExecutorEntity, CreateExecutor_CreateExecutor_Executor>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateExecutor_CreateExecutor_ExecutorFromExecutorEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CreateExecutor_CreateExecutor_Executor Map(global::SchedulerExecutorApplication.GraphQl.State.ExecutorEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CreateExecutor_CreateExecutor_Executor(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorStatusResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.CreateExecutorStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.ExecutorStatusEntity, CreateExecutorStatus_CreateStatus_ExecutorStatus> _createExecutorStatus_CreateStatus_ExecutorStatusFromExecutorStatusEntityMapper;
        public CreateExecutorStatusResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.ExecutorStatusEntity, CreateExecutorStatus_CreateStatus_ExecutorStatus> createExecutorStatus_CreateStatus_ExecutorStatusFromExecutorStatusEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _createExecutorStatus_CreateStatus_ExecutorStatusFromExecutorStatusEntityMapper = createExecutorStatus_CreateStatus_ExecutorStatusFromExecutorStatusEntityMapper ?? throw new global::System.ArgumentNullException(nameof(createExecutorStatus_CreateStatus_ExecutorStatusFromExecutorStatusEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusResult);
        public CreateExecutorStatusResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateExecutorStatusResultInfo info)
            {
                return new CreateExecutorStatusResult(MapICreateExecutorStatus_CreateStatus(info.CreateStatus, snapshot));
            }

            throw new global::System.ArgumentException("CreateExecutorStatusResultInfo expected.");
        }

        private global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatus_CreateStatus? MapICreateExecutorStatus_CreateStatus(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ExecutorStatus", global::System.StringComparison.Ordinal))
            {
                return _createExecutorStatus_CreateStatus_ExecutorStatusFromExecutorStatusEntityMapper.Map(snapshot.GetEntity<global::SchedulerExecutorApplication.GraphQl.State.ExecutorStatusEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorStatusResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateExecutorStatusResultInfo(global::StrawberryShake.EntityId? createStatus, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateStatus = createStatus;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? CreateStatus { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateExecutorStatusResultInfo(CreateStatus, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorStatus_CreateStatus_ExecutorStatusFromExecutorStatusEntityMapper : global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.ExecutorStatusEntity, CreateExecutorStatus_CreateStatus_ExecutorStatus>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateExecutorStatus_CreateStatus_ExecutorStatusFromExecutorStatusEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CreateExecutorStatus_CreateStatus_ExecutorStatus Map(global::SchedulerExecutorApplication.GraphQl.State.ExecutorStatusEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CreateExecutorStatus_CreateStatus_ExecutorStatus(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateFlowTaskStatusResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.CreateFlowTaskStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowTaskStatusEntity, CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus> _createFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatusFromFlowTaskStatusEntityMapper;
        public CreateFlowTaskStatusResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowTaskStatusEntity, CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus> createFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatusFromFlowTaskStatusEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _createFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatusFromFlowTaskStatusEntityMapper = createFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatusFromFlowTaskStatusEntityMapper ?? throw new global::System.ArgumentNullException(nameof(createFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatusFromFlowTaskStatusEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusResult);
        public CreateFlowTaskStatusResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateFlowTaskStatusResultInfo info)
            {
                return new CreateFlowTaskStatusResult(MapICreateFlowTaskStatus_CreateFlowTaskStatus(info.CreateFlowTaskStatus, snapshot));
            }

            throw new global::System.ArgumentException("CreateFlowTaskStatusResultInfo expected.");
        }

        private global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatus_CreateFlowTaskStatus? MapICreateFlowTaskStatus_CreateFlowTaskStatus(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("FlowTaskStatus", global::System.StringComparison.Ordinal))
            {
                return _createFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatusFromFlowTaskStatusEntityMapper.Map(snapshot.GetEntity<global::SchedulerExecutorApplication.GraphQl.State.FlowTaskStatusEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateFlowTaskStatusResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateFlowTaskStatusResultInfo(global::StrawberryShake.EntityId? createFlowTaskStatus, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateFlowTaskStatus = createFlowTaskStatus;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? CreateFlowTaskStatus { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateFlowTaskStatusResultInfo(CreateFlowTaskStatus, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatusFromFlowTaskStatusEntityMapper : global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowTaskStatusEntity, CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatusFromFlowTaskStatusEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus Map(global::SchedulerExecutorApplication.GraphQl.State.FlowTaskStatusEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CreateFlowTaskStatus_CreateFlowTaskStatus_FlowTaskStatus(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetAccountsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.GetAccountsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.PersonEntity, GetAccounts_Accounts_Person> _getAccounts_Accounts_PersonFromPersonEntityMapper;
        public GetAccountsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.PersonEntity, GetAccounts_Accounts_Person> getAccounts_Accounts_PersonFromPersonEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAccounts_Accounts_PersonFromPersonEntityMapper = getAccounts_Accounts_PersonFromPersonEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAccounts_Accounts_PersonFromPersonEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::SchedulerExecutorApplication.GraphQl.IGetAccountsResult);
        public GetAccountsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAccountsResultInfo info)
            {
                return new GetAccountsResult(MapIGetAccounts_AccountsArray(info.Accounts, snapshot));
            }

            throw new global::System.ArgumentException("GetAccountsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::SchedulerExecutorApplication.GraphQl.IGetAccounts_Accounts?>? MapIGetAccounts_AccountsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var persons = new global::System.Collections.Generic.List<global::SchedulerExecutorApplication.GraphQl.IGetAccounts_Accounts?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                persons.Add(MapIGetAccounts_Accounts(child, snapshot));
            }

            return persons;
        }

        private global::SchedulerExecutorApplication.GraphQl.IGetAccounts_Accounts? MapIGetAccounts_Accounts(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Person", global::System.StringComparison.Ordinal))
            {
                return _getAccounts_Accounts_PersonFromPersonEntityMapper.Map(snapshot.GetEntity<global::SchedulerExecutorApplication.GraphQl.State.PersonEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetAccountsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAccountsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? accounts, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Accounts = accounts;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Accounts { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAccountsResultInfo(Accounts, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetAccounts_Accounts_PersonFromPersonEntityMapper : global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.PersonEntity, GetAccounts_Accounts_Person>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAccounts_Accounts_PersonFromPersonEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetAccounts_Accounts_Person Map(global::SchedulerExecutorApplication.GraphQl.State.PersonEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAccounts_Accounts_Person(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetFlowTasksForFlowResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.GetFlowTasksForFlowResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowTaskEntity, GetFlowTasksForFlow_FlowTasksForFlow_FlowTask> _getFlowTasksForFlow_FlowTasksForFlow_FlowTaskFromFlowTaskEntityMapper;
        public GetFlowTasksForFlowResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowTaskEntity, GetFlowTasksForFlow_FlowTasksForFlow_FlowTask> getFlowTasksForFlow_FlowTasksForFlow_FlowTaskFromFlowTaskEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFlowTasksForFlow_FlowTasksForFlow_FlowTaskFromFlowTaskEntityMapper = getFlowTasksForFlow_FlowTasksForFlow_FlowTaskFromFlowTaskEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlowTasksForFlow_FlowTasksForFlow_FlowTaskFromFlowTaskEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowResult);
        public GetFlowTasksForFlowResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFlowTasksForFlowResultInfo info)
            {
                return new GetFlowTasksForFlowResult(MapIGetFlowTasksForFlow_FlowTasksForFlowArray(info.FlowTasksForFlow, snapshot));
            }

            throw new global::System.ArgumentException("GetFlowTasksForFlowResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlow_FlowTasksForFlow?>? MapIGetFlowTasksForFlow_FlowTasksForFlowArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var flowTasks = new global::System.Collections.Generic.List<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlow_FlowTasksForFlow?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                flowTasks.Add(MapIGetFlowTasksForFlow_FlowTasksForFlow(child, snapshot));
            }

            return flowTasks;
        }

        private global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlow_FlowTasksForFlow? MapIGetFlowTasksForFlow_FlowTasksForFlow(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("FlowTask", global::System.StringComparison.Ordinal))
            {
                return _getFlowTasksForFlow_FlowTasksForFlow_FlowTaskFromFlowTaskEntityMapper.Map(snapshot.GetEntity<global::SchedulerExecutorApplication.GraphQl.State.FlowTaskEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetFlowTasksForFlowResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFlowTasksForFlowResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? flowTasksForFlow, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            FlowTasksForFlow = flowTasksForFlow;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? FlowTasksForFlow { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFlowTasksForFlowResultInfo(FlowTasksForFlow, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetFlowTasksForFlow_FlowTasksForFlow_FlowTaskFromFlowTaskEntityMapper : global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowTaskEntity, GetFlowTasksForFlow_FlowTasksForFlow_FlowTask>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.TaskEntity, GetFlowTasksForFlow_FlowTasksForFlow_Task_Task> _getFlowTasksForFlow_FlowTasksForFlow_Task_TaskFromTaskEntityMapper;
        public GetFlowTasksForFlow_FlowTasksForFlow_FlowTaskFromFlowTaskEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.TaskEntity, GetFlowTasksForFlow_FlowTasksForFlow_Task_Task> getFlowTasksForFlow_FlowTasksForFlow_Task_TaskFromTaskEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFlowTasksForFlow_FlowTasksForFlow_Task_TaskFromTaskEntityMapper = getFlowTasksForFlow_FlowTasksForFlow_Task_TaskFromTaskEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFlowTasksForFlow_FlowTasksForFlow_Task_TaskFromTaskEntityMapper));
        }

        public GetFlowTasksForFlow_FlowTasksForFlow_FlowTask Map(global::SchedulerExecutorApplication.GraphQl.State.FlowTaskEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFlowTasksForFlow_FlowTasksForFlow_FlowTask(entity.Id, entity.SuccessorsIds, entity.EnvironmentVariables, MapIGetFlowTasksForFlow_FlowTasksForFlow_Task(entity.Task, snapshot));
        }

        private global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlow_FlowTasksForFlow_Task? MapIGetFlowTasksForFlow_FlowTasksForFlow_Task(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Task", global::System.StringComparison.Ordinal))
            {
                return _getFlowTasksForFlow_FlowTasksForFlow_Task_TaskFromTaskEntityMapper.Map(snapshot.GetEntity<global::SchedulerExecutorApplication.GraphQl.State.TaskEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetFlowTasksForFlow_FlowTasksForFlow_Task_TaskFromTaskEntityMapper : global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.TaskEntity, GetFlowTasksForFlow_FlowTasksForFlow_Task_Task>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFlowTasksForFlow_FlowTasksForFlow_Task_TaskFromTaskEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFlowTasksForFlow_FlowTasksForFlow_Task_Task Map(global::SchedulerExecutorApplication.GraphQl.State.TaskEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFlowTasksForFlow_FlowTasksForFlow_Task_Task(entity.InputType, entity.OutputType, entity.Name, entity.Command);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetLoginResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.GetLoginResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.PersonEntity, GetLogin_LocalLogin_Person> _getLogin_LocalLogin_PersonFromPersonEntityMapper;
        public GetLoginResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.PersonEntity, GetLogin_LocalLogin_Person> getLogin_LocalLogin_PersonFromPersonEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getLogin_LocalLogin_PersonFromPersonEntityMapper = getLogin_LocalLogin_PersonFromPersonEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getLogin_LocalLogin_PersonFromPersonEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::SchedulerExecutorApplication.GraphQl.IGetLoginResult);
        public GetLoginResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetLoginResultInfo info)
            {
                return new GetLoginResult(MapIGetLogin_LocalLogin(info.LocalLogin, snapshot));
            }

            throw new global::System.ArgumentException("GetLoginResultInfo expected.");
        }

        private global::SchedulerExecutorApplication.GraphQl.IGetLogin_LocalLogin? MapIGetLogin_LocalLogin(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Person", global::System.StringComparison.Ordinal))
            {
                return _getLogin_LocalLogin_PersonFromPersonEntityMapper.Map(snapshot.GetEntity<global::SchedulerExecutorApplication.GraphQl.State.PersonEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetLoginResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetLoginResultInfo(global::StrawberryShake.EntityId? localLogin, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            LocalLogin = localLogin;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? LocalLogin { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetLoginResultInfo(LocalLogin, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetLogin_LocalLogin_PersonFromPersonEntityMapper : global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.PersonEntity, GetLogin_LocalLogin_Person>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetLogin_LocalLogin_PersonFromPersonEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetLogin_LocalLogin_Person Map(global::SchedulerExecutorApplication.GraphQl.State.PersonEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetLogin_LocalLogin_Person(entity.Id, entity.Login);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class OnFlowStartResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.OnFlowStartResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowRunEntity, OnFlowStart_OnFlowStart_FlowRun> _onFlowStart_OnFlowStart_FlowRunFromFlowRunEntityMapper;
        public OnFlowStartResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowRunEntity, OnFlowStart_OnFlowStart_FlowRun> onFlowStart_OnFlowStart_FlowRunFromFlowRunEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onFlowStart_OnFlowStart_FlowRunFromFlowRunEntityMapper = onFlowStart_OnFlowStart_FlowRunFromFlowRunEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onFlowStart_OnFlowStart_FlowRunFromFlowRunEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::SchedulerExecutorApplication.GraphQl.IOnFlowStartResult);
        public OnFlowStartResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnFlowStartResultInfo info)
            {
                return new OnFlowStartResult(MapIOnFlowStart_OnFlowStart(info.OnFlowStart, snapshot));
            }

            throw new global::System.ArgumentException("OnFlowStartResultInfo expected.");
        }

        private global::SchedulerExecutorApplication.GraphQl.IOnFlowStart_OnFlowStart? MapIOnFlowStart_OnFlowStart(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("FlowRun", global::System.StringComparison.Ordinal))
            {
                return _onFlowStart_OnFlowStart_FlowRunFromFlowRunEntityMapper.Map(snapshot.GetEntity<global::SchedulerExecutorApplication.GraphQl.State.FlowRunEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class OnFlowStartResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnFlowStartResultInfo(global::StrawberryShake.EntityId? onFlowStart, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            OnFlowStart = onFlowStart;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? OnFlowStart { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnFlowStartResultInfo(OnFlowStart, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class OnFlowStart_OnFlowStart_FlowRunFromFlowRunEntityMapper : global::StrawberryShake.IEntityMapper<global::SchedulerExecutorApplication.GraphQl.State.FlowRunEntity, OnFlowStart_OnFlowStart_FlowRun>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnFlowStart_OnFlowStart_FlowRunFromFlowRunEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public OnFlowStart_OnFlowStart_FlowRun Map(global::SchedulerExecutorApplication.GraphQl.State.FlowRunEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnFlowStart_OnFlowStart_FlowRun(entity.Id, entity.FlowId, entity.ExecutorId);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    internal interface ICreateExecutorInputInfo
    {
        global::System.Boolean IsAccountIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsDescriptionSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    internal interface IExecutorStatusInputInfo
    {
        global::System.Boolean IsExecutorIdSet { get; }

        global::System.Boolean IsStatusCodeSet { get; }

        global::System.Boolean IsDateSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    internal interface IFlowTaskStatusInputInfo
    {
        global::System.Boolean IsFlowRunIdSet { get; }

        global::System.Boolean IsFlowTaskIdSet { get; }

        global::System.Boolean IsStatusCodeSet { get; }

        global::System.Boolean IsDescriptionSet { get; }

        global::System.Boolean IsDateSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateExecutorResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public CreateExecutorBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateExecutorResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateExecutorResult Result, CreateExecutorResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICreateExecutorResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateExecutorResult, CreateExecutorResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? createExecutorId = default !;
            _entityStore.Update(session =>
            {
                createExecutorId = UpdateICreateExecutor_CreateExecutorEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createExecutor"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateExecutorResultInfo(createExecutorId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateICreateExecutor_CreateExecutorEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Executor", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SchedulerExecutorApplication.GraphQl.State.ExecutorEntity? entity))
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.ExecutorEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.ExecutorEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateExecutorStatusBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::SchedulerExecutorApplication.GraphQl.ExecutorStatusCode> _executorStatusCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        public CreateExecutorStatusBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateExecutorStatusResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _executorStatusCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::SchedulerExecutorApplication.GraphQl.ExecutorStatusCode>("ExecutorStatusCode") ?? throw new global::System.ArgumentException("No serializer for type `ExecutorStatusCode` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateExecutorStatusResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateExecutorStatusResult Result, CreateExecutorStatusResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICreateExecutorStatusResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateExecutorStatusResult, CreateExecutorStatusResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? createStatusId = default !;
            _entityStore.Update(session =>
            {
                createStatusId = UpdateICreateExecutorStatus_CreateStatusEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createStatus"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateExecutorStatusResultInfo(createStatusId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateICreateExecutorStatus_CreateStatusEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ExecutorStatus", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SchedulerExecutorApplication.GraphQl.State.ExecutorStatusEntity? entity))
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.ExecutorStatusEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.ExecutorStatusEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class CreateFlowTaskStatusBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusCode> _flowTaskStatusCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        public CreateFlowTaskStatusBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.ICreateFlowTaskStatusResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _flowTaskStatusCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::SchedulerExecutorApplication.GraphQl.FlowTaskStatusCode>("FlowTaskStatusCode") ?? throw new global::System.ArgumentException("No serializer for type `FlowTaskStatusCode` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateFlowTaskStatusResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateFlowTaskStatusResult Result, CreateFlowTaskStatusResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICreateFlowTaskStatusResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateFlowTaskStatusResult, CreateFlowTaskStatusResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? createFlowTaskStatusId = default !;
            _entityStore.Update(session =>
            {
                createFlowTaskStatusId = UpdateICreateFlowTaskStatus_CreateFlowTaskStatusEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createFlowTaskStatus"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateFlowTaskStatusResultInfo(createFlowTaskStatusId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateICreateFlowTaskStatus_CreateFlowTaskStatusEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("FlowTaskStatus", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SchedulerExecutorApplication.GraphQl.State.FlowTaskStatusEntity? entity))
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.FlowTaskStatusEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.FlowTaskStatusEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetAccountsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetAccountsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetAccountsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetAccountsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetAccountsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAccountsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAccountsResult Result, GetAccountsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetAccountsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAccountsResult, GetAccountsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? accountsId = default !;
            _entityStore.Update(session =>
            {
                accountsId = UpdateIGetAccounts_AccountsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accounts"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAccountsResultInfo(accountsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetAccounts_AccountsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var persons = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                persons.Add(UpdateIGetAccounts_AccountsEntity(session, child, entityIds));
            }

            return persons;
        }

        private global::StrawberryShake.EntityId? UpdateIGetAccounts_AccountsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Person", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SchedulerExecutorApplication.GraphQl.State.PersonEntity? entity))
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.PersonEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Login));
                }
                else
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.PersonEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetFlowTasksForFlowBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonDocument> _anyParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetFlowTasksForFlowBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetFlowTasksForFlowResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _anyParser = serializerResolver.GetLeafValueParser<global::System.Text.Json.JsonElement, global::System.Text.Json.JsonDocument>("Any") ?? throw new global::System.ArgumentException("No serializer for type `Any` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFlowTasksForFlowResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFlowTasksForFlowResult Result, GetFlowTasksForFlowResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetFlowTasksForFlowResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetFlowTasksForFlowResult, GetFlowTasksForFlowResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? flowTasksForFlowId = default !;
            _entityStore.Update(session =>
            {
                flowTasksForFlowId = UpdateIGetFlowTasksForFlow_FlowTasksForFlowEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "flowTasksForFlow"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetFlowTasksForFlowResultInfo(flowTasksForFlowId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetFlowTasksForFlow_FlowTasksForFlowEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var flowTasks = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                flowTasks.Add(UpdateIGetFlowTasksForFlow_FlowTasksForFlowEntity(session, child, entityIds));
            }

            return flowTasks;
        }

        private global::StrawberryShake.EntityId? UpdateIGetFlowTasksForFlow_FlowTasksForFlowEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("FlowTask", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SchedulerExecutorApplication.GraphQl.State.FlowTaskEntity? entity))
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.FlowTaskEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32NonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "successorsIds")), DeserializeJsonDocument(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "environmentVariables")), UpdateIGetFlowTasksForFlow_FlowTasksForFlow_TaskEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.FlowTaskEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32NonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "successorsIds")), DeserializeJsonDocument(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "environmentVariables")), UpdateIGetFlowTasksForFlow_FlowTasksForFlow_TaskEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? DeserializeInt32NonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @ints = new global::System.Collections.Generic.List<global::System.Int32>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @ints.Add(DeserializeNonNullableInt32(child));
            }

            return @ints;
        }

        private global::System.Text.Json.JsonDocument? DeserializeJsonDocument(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _anyParser.Parse(obj.Value!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetFlowTasksForFlow_FlowTasksForFlow_TaskEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Task", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SchedulerExecutorApplication.GraphQl.State.TaskEntity? entity))
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.TaskEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "outputType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "command"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.TaskEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "outputType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "command"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class GetLoginBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IGetLoginResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetLoginResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetLoginBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IGetLoginResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetLoginResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetLoginResult Result, GetLoginResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetLoginResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetLoginResult, GetLoginResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? localLoginId = default !;
            _entityStore.Update(session =>
            {
                localLoginId = UpdateIGetLogin_LocalLoginEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "localLogin"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetLoginResultInfo(localLoginId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetLogin_LocalLoginEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Person", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SchedulerExecutorApplication.GraphQl.State.PersonEntity? entity))
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.PersonEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "login"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.PersonEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "login"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class OnFlowStartBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SchedulerExecutorApplication.GraphQl.IOnFlowStartResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IOnFlowStartResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public OnFlowStartBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::SchedulerExecutorApplication.GraphQl.IOnFlowStartResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IOnFlowStartResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOnFlowStartResult Result, OnFlowStartResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IOnFlowStartResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOnFlowStartResult, OnFlowStartResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? onFlowStartId = default !;
            _entityStore.Update(session =>
            {
                onFlowStartId = UpdateIOnFlowStart_OnFlowStartEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "onFlowStart"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OnFlowStartResultInfo(onFlowStartId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIOnFlowStart_OnFlowStartEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("FlowRun", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SchedulerExecutorApplication.GraphQl.State.FlowRunEntity? entity))
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.FlowRunEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "flowId")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "executorId"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::SchedulerExecutorApplication.GraphQl.State.FlowRunEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "flowId")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "executorId"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class SchedulerServerEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "Executor" => ParseExecutorEntityId(obj, __typename), "ExecutorStatus" => ParseExecutorStatusEntityId(obj, __typename), "FlowTaskStatus" => ParseFlowTaskStatusEntityId(obj, __typename), "Person" => ParsePersonEntityId(obj, __typename), "FlowTask" => ParseFlowTaskEntityId(obj, __typename), "Task" => ParseTaskEntityId(obj, __typename), "FlowRun" => ParseFlowRunEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "Executor" => FormatExecutorEntityId(entityId), "ExecutorStatus" => FormatExecutorStatusEntityId(entityId), "FlowTaskStatus" => FormatFlowTaskStatusEntityId(entityId), "Person" => FormatPersonEntityId(entityId), "FlowTask" => FormatFlowTaskEntityId(entityId), "Task" => FormatTaskEntityId(entityId), "FlowRun" => FormatFlowRunEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseExecutorEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatExecutorEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseExecutorStatusEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatExecutorStatusEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseFlowTaskStatusEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatFlowTaskStatusEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePersonEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatPersonEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseFlowTaskEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatFlowTaskEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTaskEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatTaskEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseFlowRunEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatFlowRunEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.6.0.0")]
    public partial class SchedulerServerStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public SchedulerServerStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
